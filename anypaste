#!/bin/bash

# This is anypaste. Authored by Markasoftware (see markasoftware.com)
# This software is released under the GPLv3, see gnu.org

function anypaste-sprunge {
    if [[ $1 == "upload" ]]
    then
        sprunge_link=$(curl -#fF "sprunge=@$2" sprunge.us)
        [[ $? -ne 0 ]] && echo 'ERROR: sprunge.us did not return HTTP 200!' && return 1
        echo ''
        echo "Direct Link: $sprunge_link"
        echo ''
    fi
}

function anypaste-vgyme {
    case $1 in
        check_eligibility)
            # This is literally the worst possible way to design how the quotes should be used in a regex
            [[ "$3" =~ 'image/jpeg'|'image/png'|'image/gif'|'image/x-ms-bmp' ]]
            ;;
        upload)
            vgyme_json=$(curl -#fF "file=@$2" https://vgy.me/upload)
            [[ $? -ne 0 ]] && echo 'ERROR: vgy.me did not return HTTP 200!' && return 1
            vgyme_link=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/[a-zA-Z0-9]+' | head -1)
            vgyme_direct=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/[a-zA-Z0-9]+\.[a-zA-Z]+')
            vgyme_delete=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/delete/[a-zA-Z0-9]+')
            echo ''
            echo "Link: $vgyme_link"
            echo "Direct Link: $vgyme_direct"
            echo "Delete: $vgyme_delete"
            echo ''
            ;;
    esac
}

function anypaste-instaudio {
    case $1 in
        check_eligibility)
            [[ "$3" =~ 'audio/x-wav'|'audio/mpeg'|'audio/ogg' ]]
            ;;
        upload)
            inst_json=$(curl -#fF "audio_file=@$2" https://instaud.io/new.json)
            [[ $? -ne 0 ]] && echo 'ERROR: instaud.io did not return HTTP 200!' && return 1
            inst_redirect=$(echo "$inst_json" | grep -oE '/[a-zA-Z0-9]+')
            # this is POSIX compliant, I guess
            ap_ext="${2##*.}"
            echo ''
            echo "Link: https://instaud.io$inst_redirect"
            # apparently this is POSIX compliant?
            echo "Direct Link: https://instaud.io/_$inst_redirect.$ap_ext"
            echo ''
            ;;
    esac
}

# CREATE CONFIGURATION

# determine path to configuration file
# todo: allow command-line specified configuration file

[[ -n "$XDG_CONFIG_HOME" ]] && ap_cfg="$XDG_CONFIG_HOME/anypaste.conf" || ap_cfg="$HOME/.config/anypaste.conf"

if [[ ! -e "$ap_cfg" ]]
then
    echo 'Could not find configuration file, creating one.'
    echo 'The default configuration is fine unless you want to enable extra plugins.'
    # todo: possibly use base64 instead
    cat > "$ap_cfg" <<< "ap_plugins=( 'anypaste-vgyme' 'anypaste-instaudio' 'anypaste-gfycat' 'anypaste-sprunge' )"
fi

# LOAD CONFIGURATION

source "$ap_cfg"

# GET FILE DATA

ap_path="$1"
ap_file_ib="$(file -ib $ap_path)"

if [[ ! -r "$ap_path" ]]
then
    echo "ERROR: could not read file at $ap_path"
    echo "Make sure it exists and you have permissions to read it, then try again."
    exit 1
fi

for cur_plugin in "${ap_plugins[@]}"
do
    # CHECK PLUGIN ELIGIBILITY

    $cur_plugin check_eligibility "$ap_path" "$ap_file_ib"
    if [[ $? -eq 0 ]] 
    then
        config_chk_err="false"
        for cur_req_config in $($cur_plugin get_required_config)
        do
            if [[ -z "${!cur_req_config}" ]]
            then
                echo "WARNING: Plugin $cur_plugin is missing required configuration parameter $cur_req_config, skipping it"
                config_chk_err="true"
                break
            fi
        done
        [[ $config_chk_err == "true" ]] && continue
        echo "Using plugin $cur_plugin"
        if $cur_plugin upload $ap_path
        then
            echo 'Upload complete, have a nice day!'
            exit
        else
            echo 'Plugin reported an error, trying next one'
            continue
        fi
    fi
done