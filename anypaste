#!/bin/bash

# This is anypaste. Authored by Markasoftware (see markasoftware.com)
# This software is released under the GPLv3, see gnu.org

# COMMON PLUGIN FUNCTIONS

# Args: File to check, max size, plugin name
function check_size {
    [[ $(wc -c < "$1") -lt $2 ]] || (echo "WARNING: File is of compatible type for plugin $3, but is above size limit of $2 bytes" && false)
}

function curl_form_upload {
    ap_mime=$(echo "$ap_file_ib" | grep -o '[a-z-]*/[a-z-]*')
    curl -#fF "$1=@\"$ap_path\";type=$ap_mime" "$2" || { echo 'ERROR: Upload request did not return HTTP 200!' >&2 && return 1; }
}

# PLUGINS

function anypaste-sprunge {
    case $1 in
    check_eligibility)
        [[ "$ap_file_ib" =~ "^text/" ]]
        ;;
    upload)
        sprunge_link=$(curl_form_upload 'sprunge' 'sprunge.us') || return 1
        echo ''
        echo "Direct Link: $sprunge_link"
        echo ''
        ;;
    esac
}

function anypaste-fileio {
    if [[ $1 == 'upload' ]]
    then
        fileio_json=$(curl_form_upload 'file' 'https://file.io') || return 1
        fileio_link=$(echo "$fileio_json" | grep -oE 'https://file.io/[a-zA-Z0-9]+')
        echo 'Reminder: file.io uploads expire after 14 days!'
        echo ''
        echo "Direct Link: $fileio_link"
        echo ''
    fi
}

function anypaste-vgyme {
    case $1 in
        check_eligibility)
            # This is literally the worst possible way to design how the quotes should be used in a regex
            [[ "$ap_file_ib" =~ 'image/jpeg'|'image/png'|'image/gif'|'image/x-ms-bmp' ]] && check_size "$ap_path" 20000000 "anypaste-vgyme"
            ;;
        upload)
            vgyme_json=$(curl_form_upload 'file' 'https://vgy.me/upload') || return 1
            vgyme_link=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/[a-zA-Z0-9]+' | head -1)
            vgyme_direct=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/[a-zA-Z0-9]+\.[a-zA-Z]+')
            vgyme_delete=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/delete/[a-zA-Z0-9]+')
            echo ''
            echo "Link: $vgyme_link"
            echo "Direct Link: $vgyme_direct"
            echo "Delete: $vgyme_delete"
            echo ''
            ;;
    esac
}

function anypaste-instaudio {
    case $1 in
        check_eligibility)
            [[ "$ap_file_ib" =~ 'audio/x-wav'|'audio/mpeg'|'audio/ogg' ]] && check_size "$ap_path" 15000000 "anypaste-instaudio"
            ;;
        upload)
            inst_json=$(curl_form_upload 'audio-file' 'https://instaud.io/new.json') || return 1
            inst_redirect=$(echo "$inst_json" | grep -oE '/[a-zA-Z0-9]+')
            # this is POSIX compliant, I guess
            ap_ext="${ap_path##*.}"
            echo ''
            echo "Link: https://instaud.io$inst_redirect"
            # apparently this is POSIX compliant?
            echo "Direct Link: https://instaud.io/_$inst_redirect.$ap_ext"
            echo ''
            ;;
    esac
}

function anypaste-gfycat {
    case $1 in
        check_eligibility)
            return 1
            ;;
    esac
}

#################
## END PLUGINS ##
## BEGIN CORE ###
#################

# FUNCTIONS

# exit safely, remove temporary files if any
ap_tmp_files=()
function ap_exit {
    [[ -n "$ap_tmp_files" ]] && rm "${ap_tmp_files[@]}"
    [[ -n $1 ]] && exit $1 || exit
}

# Y is always default. Word your questions better. Be positive!
# args: message
function ap_i_yn {
    echo -n "$1 [Y/n] "
    read ap_attempt
    [[ "$ap_attempt" != 'n' && "$ap_attempt" != 'N' ]]
}

function search_compatible_plugins {
    echo 'Not implemented yet.'
}

function ap_i_select_plugin {
    # fail if no plugins
    [[ ${#ap_compatible_plugins[@]} -eq 0 ]] && return 1
    if [[ ${#ap_compatible_plugins[@]} -eq 1 ]] 
    then
        echo "Only one compatible plugin was found: $ap_compatible_plugins"
        ap_selected_plugin="$ap_compatible_plugins"
    fi
    echo "The following plugins were found: ${ap_compatible_plugins[@]}"
    # keep asking for search terms until we find something
    while true
    do
        echo ''
        echo 'Enter the full or partial name of a plugin, then hit enter'
        read ap_search_term
        ap_matched_plugins=()
        failed='false'
        for cur_plugin in "${ap_compatible_plugins[@]}"
        do
            [[ "$cur_plugin" =~ "$ap_search_term" ]] && ap_matched_plugins+=("$cur_plugin")
        done
        if [[ ${#ap_matched_plugins[@]} -eq 0 ]]
        then
            echo 'No plugins containing your search term were found.'
            continue
        fi
        if [[ ${#ap_matched_plugins[@]} -gt 1 ]]
        then
            echo "Multiple matching plugins: ${ap_matched_plugins[@]}"
            echo 'Please refine your search.'
            continue
        fi
        ap_selected_plugin="$ap_matched_plugins"
        break
    done
}

# HELP

ap_help='
Usage: anypaste [-ifh] [-p plugin] [-c config_file_path] [file1 [file2 ...]]

Upload `file`s or stdin to an automatically selected hosting sites.
You can specify `-` as a file to read from stdin. If no files are
listed, it will automatically attempt to use stdin.

OPTIONS:

 -i          Enable interactive mode. Will prompt for important options.
             Combining this with options intended for non-interactive
             use (-p, -f, etc) has undefined behavior.
 -p          Force using the given plugin, even if it is not listed in
             the configuration file. Will not fall back to other plugins
 -f          Force: do not check plugin compatibility. Recommended only
             to use in combination with -p
 -c          Use the specified configuration file instead of the default
             one located at $XDG_CONFIG_HOME/anypaste.conf. You can use
             /dev/null as a config file to have nothing at all, but you
             will need to set config variables in the shell manually
 -h, --help  Display this help text.

Plugins may support additional options not listed here.
'

if [[ "$@" =~ '--help' ]]
then
    echo "$ap_help"
    ap_exit
fi

# PARSE OPTIONS

ap_i='false'
ap_f='false'
ap_cfg=""

while getopts 'fhip:c:' ap_opt
do
    case $ap_opt in
    h)
        echo "$ap_help"
        ap_exit
        ;;
    i)
        ap_i='true'
        ;;
    f)
        ap_f='true'
        ;;
    p)
        echo 'Manual plugin selection not supported yet, sorry :('
        ;;
    c)
        ap_cfg="$OPTARG"
        ;;
    esac
done

shift $[OPTIND - 1]

# CREATE CONFIGURATION

# determine path to configuration file
# todo: allow command-line specified configuration file

if [[ -z "$ap_cfg" ]]
then
    [[ -n "$XDG_CONFIG_HOME" ]] && ap_cfg="$XDG_CONFIG_HOME/anypaste.conf" || ap_cfg="$HOME/.config/anypaste.conf"
fi

if [[ ! -e "$ap_cfg" ]]
then
    echo "Could not find configuration file, creating one at $ap_cfg."
    echo 'The default configuration is fine unless you want to enable extra plugins.'
    # todo: possibly use base64 instead
    cat > "$ap_cfg" <<< "ap_plugins=( 'anypaste-vgyme' 'anypaste-instaudio' 'anypaste-gfycat' 'anypaste-sprunge' 'anypaste-fileio' )"
fi

# LOAD AND CHECK CONFIGURATION

source "$ap_cfg"

[[ ${#ap_plugins[@]} -eq 0 ]] && echo 'No plugins listed in config!' && ap_exit 1

# GET FILE DATA

ap_paths=()
function ap_stdin_to_file {
    [[ -t 0 ]] && return 1
    ap_rand_filename=$(tr -dc a-zA-Z0-9 < /dev/urandom | head -c 20)
    ap_tmp_path="/tmp/anypaste-$ap_rand_filename"
    cat > "$ap_tmp_path"
    ap_paths+=("$ap_tmp_path")
    ap_tmp_files+=("$ap_tmp_path")
}
if [[ $# -gt 0 ]]
then
    # files were specified on the command line
    ap_found_stdin='false'
    for i in "$@"
    do
        if [[ "$i" == "-" ]]
        then
            $ap_found_stdin && echo "Don't specify stdin multiple times, you twerp!" && ap_exit 1
            ap_found_stdin='true'
            ap_stdin_to_file || { echo 'ERROR: stdin is a terminal!' && ap_exit; }
        else
            ap_paths+=("$i")
        fi        
    done
else
    # no files on command line, try stdin
    if ! ap_stdin_to_file
    then
        echo 'ERROR: no file specified and stdin is a terminal'
        echo "$ap_help"
        ap_exit
    fi
fi


# CHECK CONFIGURATION PARAMETERS FUNCTION

function check_config {
    missing_configs=()
    for cur_req_config in $($1 get_required_config)
    do
        if [[ -z "${!cur_req_config}" ]]
        then
            missing_configs+=("$cur_req_config")
        fi
    done
    if [[ -n "${missing_configs[@]}" ]]
    then
        echo "Missing required configuration parameters for $1: ${missing_configs[@]}"
        echo 'You can set them in your configuration file. Skipping this plugin for now.'
        return 1
    fi
}

# UPLOAD FUNCTION

# args: plugin executable, ap_path, ap_file_ib
function upload_plugin {
    echo "Attempting to upload with plugin $1"
    if $1 upload
    then
        echo 'Upload complete, have a nice day!'
    else
        echo 'Plugin reported an error.'
        return 1
    fi
}

# LOOP THROUGH PLUGINS

# args: whether to skip compatibility checks, whether to stop after first match
function find_plugins {
    ap_compatible_plugins=()
    for cur_plugin in "${ap_plugins[@]}"
    do
        # CHECK PLUGIN ELIGIBILITY

        if $1 || $cur_plugin check_eligibility "$ap_path" "$ap_file_ib"
        then
            $1 || check_config $cur_plugin || continue
            ap_compatible_plugins+=("$cur_plugin")
            $2 && continue
        fi
    done
}

function upload_loop {
    if [[ ! -r "$ap_path" ]]
    then
        echo "ERROR: could not read file at $ap_path"
        echo "Make sure it exists and you have permissions to read it."
        return 1
    fi
    [[ -d "$ap_path" ]] && echo "Uh oh! You can't upload a directory!" && return 1
    ap_file_ib=$(file -ib "$ap_path")

    if $ap_i
    then
        # INTERACTIVE
        ap_i_yn 'Determine compatible plugins automatically?' && ap_skip_compat='false' || ap_skip_compat='true'
        find_plugins $ap_skip_compat false
        # keep looping and selecting plugins, removing the previously attempted plugin each time, until we succeed
        # or there are none left
        while true
        do
            # If there are none left or for some reason nothing can be selected, it can fail
            ap_i_select_plugin || return 1
            ap_i_yn "Attempt to upload with plugin $ap_selected_plugin?" || return 1
            upload_plugin "$ap_selected_plugin" "$ap_path" "$ap_file_ib" && return ||
                ap_compatible_plugins=("${ap_compatible_plugins[@]/$ap_selected_plugin}")
        done
    else
        # NON-INTERACTIVE
        find_plugins $ap_f true
        for cur_plugin in "${ap_compatible_plugins[@]}"
        do
            upload_plugin $cur_plugin "$ap_path" "$ap_file_ib" && ap_exit
        done
        echo 'No compatible plugins found, or all compatible plugins failed.'
    fi
}

for ap_path in "${ap_paths[@]}"
do
    upload_loop
done

ap_exit