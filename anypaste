#!/bin/bash

# This is anypaste. Authored by Markasoftware (see markasoftware.com)
# This software is released under the GPLv3, see gnu.org

# COMMON PLUGIN FUNCTIONS

# Args: File to check, max size, plugin name
function check_size {
    [[ $(wc -c < "$1") -lt $2 ]] || (echo "WARNING: File is of compatible type for plugin $3, but is above size limit of $2 bytes" && false)
}

function anypaste-sprunge {
    if [[ $1 == "upload" ]]
    then
        sprunge_link=$(curl -#fF "sprunge=@$2" sprunge.us)
        [[ $? -ne 0 ]] && echo 'ERROR: sprunge.us did not return HTTP 200!' && return 1
        echo ''
        echo "Direct Link: $sprunge_link"
        echo ''
    fi
}

function anypaste-vgyme {
    case $1 in
        check_eligibility)
            # This is literally the worst possible way to design how the quotes should be used in a regex
            [[ "$3" =~ 'image/jpeg'|'image/png'|'image/gif'|'image/x-ms-bmp' ]] && check_size "$2" 20000000 "anypaste-vgyme"
            ;;
        upload)
            ap_mime=$(echo "$3" | grep -o '[a-z]*/[a-z]*')
            # sometimes curl does not set the same mime type that's returned by file -ib
            # this causes issues (http 422 from vgy.me)
            vgyme_json=$(curl -#fF "file=@\"$2\";type=$ap_mime" https://vgy.me/upload)
            [[ $? -ne 0 ]] && echo 'ERROR: vgy.me did not return HTTP 200!' && return 1
            vgyme_link=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/[a-zA-Z0-9]+' | head -1)
            vgyme_direct=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/[a-zA-Z0-9]+\.[a-zA-Z]+')
            vgyme_delete=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/delete/[a-zA-Z0-9]+')
            echo ''
            echo "Link: $vgyme_link"
            echo "Direct Link: $vgyme_direct"
            echo "Delete: $vgyme_delete"
            echo ''
            ;;
    esac
}

function anypaste-instaudio {
    case $1 in
        check_eligibility)
            [[ "$3" =~ 'audio/x-wav'|'audio/mpeg'|'audio/ogg' ]] && check_size "$2" 15000000 "anypaste-instaudio"
            ;;
        upload)
            inst_json=$(curl -#fF "audio_file=@$2" https://instaud.io/new.json)
            [[ $? -ne 0 ]] && echo 'ERROR: instaud.io did not return HTTP 200!' && return 1
            inst_redirect=$(echo "$inst_json" | grep -oE '/[a-zA-Z0-9]+')
            # this is POSIX compliant, I guess
            ap_ext="${2##*.}"
            echo ''
            echo "Link: https://instaud.io$inst_redirect"
            # apparently this is POSIX compliant?
            echo "Direct Link: https://instaud.io/_$inst_redirect.$ap_ext"
            echo ''
            ;;
    esac
}

function anypaste-gfycat {
    case $1 in
        check_eligibility)
            ;;
    esac
}

#################
## END PLUGINS ##
## BEGIN CORE ###
#################

# PARSE COMMAND LINE OPTIONS, DISPLAY HELP

ap_help='Usage: anypaste [-i] [-p plugin] [-c config_file_path] [file]
Upload `file` to an automatically selected hosting site.

OPTIONS:

 -i          Enable interactive mode. Will prompt for important options.
 -p          Force using the given plugin, even if it is not listed in
             the configuration file. Will not fall back to other plugins
 -f          Force: do not check plugin compatibility. Recommended only
             to use in combination with -p
 -c          Use the specified configuration file instead of the default
             one located at $XDG_CONFIG_HOME/anypaste.conf. You can use
             /dev/null as a config file to have nothing at all, but you
             will need to set config variables in the shell manually
 -h, --help  Display this help text.
'

if [[ "$@" =~ '--help' ]]
then
    echo "$ap_help"
    exit
fi

ap_i='false'
ap_f='false'
ap_cfg=""

while getopts 'fhip:c:' ap_opt
do
    case $ap_opt in
    h)
        echo "$ap_help"
        exit
        ;;
    i)
        ap_i='true'
        ;;
    f)
        ap_f='true'
        ;;
    p)
        echo 'Manual plugin selection not supported yet, sorry :('
        ;;
    c)
        ap_cfg="$OPTARG"
        ;;
    esac
done

# CREATE CONFIGURATION

# determine path to configuration file
# todo: allow command-line specified configuration file

if [[ -z "$ap_cfg" ]]
then
    [[ -n "$XDG_CONFIG_HOME" ]] && ap_cfg="$XDG_CONFIG_HOME/anypaste.conf" || ap_cfg="$HOME/.config/anypaste.conf"
fi

if [[ ! -e "$ap_cfg" ]]
then
    echo "Could not find configuration file, creating one at $ap_cfg."
fi

# UPLOAD FUNCTION

# args: plugin executable, ap_path, ap_file_ib
function upload_plugin {
    echo "Attempting to upload with plugin `$1`"
    if $1 upload "$2" "$3"
    then
        echo 'Upload complete, have a nice day!'
    else
        echo 'Plugin reported an error.'
        return 1
    fi
}

# LOOP THROUGH PLUGINS

compatible_plugins=()
for cur_plugin in "${ap_plugins[@]}"
do
    # CHECK PLUGIN ELIGIBILITY

    if $ab_f || $cur_plugin check_eligibility "$ap_path" "$ap_file_ib"
    then
        $ab_f || check_config $cur_plugin || continue
        compatible_plugins+=("$cur_plugin")
        $ab_i && continue
        # PERFORM UPLOAD
        if upload_plugin $cur_plugin "$ap_path" "$ap_file_ib"
        then
            exit
        else
            echo 'Trying next plugin...'
        fi
    fi
done

if $ab_i
then
    echo "The following compatible plugins were found: ${compatible_plugins[@]}"
    echo 'Enter the full or partial name of them, then hit enter to search...'
else
    echo ''
    echo 'ERROR: No compatible plugins found. '
fi