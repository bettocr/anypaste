#!/bin/bash

# This is anypaste. Authored by Markasoftware (see markasoftware.com)
# This software is released under the GPLv3, see gnu.org

# COMMON PLUGIN FUNCTIONS

# Args: File to check, max size, plugin name
function check_size {
    if ! [[ $(wc -c < "$ap_path") -lt $1 ]]
    then
        echo "WARNING: File is of compatible type for plugin $ap_plugin, but is above size limit of $1 bytes"
        return 1
    fi
}

function curl_form_upload {
    ap_mime=$(echo "$ap_file_ib" | grep -o '[_.a-z-]*/[_.a-z-]*')
    curl -#fF "$1=@\"$ap_path\";type=$ap_mime" "$2" || { echo 'ERROR: Upload request did not return HTTP 200!' >&2 && return 1; }
}

function curl_file_upload {
    curl -X$1 -#fT "$2" "$3" || { echo 'ERROR: Upload request did not return HTTP 200!' >&2 && return 1; }
}

# PLUGINS

function anypaste-sprunge {
    case $1 in
    check_eligibility)
        [[ "$ap_file_ib" =~ "text/" ]]
        ;;
    upload)
        sprunge_link=$(curl_form_upload 'sprunge' 'sprunge.us') || return 1
        echo ''
        echo "Direct Link: $sprunge_link"
        echo ''
        ;;
    esac
}

function anypaste-ixio {
    case $1 in
    check_eligibility)
        [[ "$ap_file_ib" =~ "text/" ]]
        ;;
    upload)
        ixio_link=$(curl_form_upload 'f:1' ix.io)
        echo ''
        echo "Direct Link: $ixio_link"
        echo ''
        ;;
    esac
}

function anypaste-hastebin {
    case $1 in
    check_eligibility)
        [[ "$ap_file_ib" =~ "text/" ]]
        ;;
    upload)
        hastebin_json=$(curl_file_upload 'POST' "$ap_path" 'https://hastebin.com/documents') || return 1
        hastebin_id=$(echo "${hastebin_json:8}" | grep -o '[a-z]*')
        echo 'Reminder: hastebin.com uploads are deleted 30 days after their last view!'
        echo ''
        echo "Link: https://hastebin.com/$hastebin_id"
        echo "Direct Link: https://hastebin.com/raw/$hastebin_id"
        echo ''

    esac
}

function anypaste-fileio {
    if [[ $1 == 'upload' ]]
    then
        fileio_json=$(curl_form_upload 'file' 'https://file.io') || return 1
        fileio_link=$(echo "$fileio_json" | grep -oE 'https://file.io/[a-zA-Z0-9]+')
        echo 'Reminder: file.io uploads are deleted after 14 days!'
        echo ''
        echo "Direct Link: $fileio_link"
        echo ''
    fi
}

function anypaste-vgyme {
    case $1 in
        check_eligibility)
            # This is literally the worst possible way to design how the quotes should be used in a regex
            [[ "$ap_file_ib" =~ 'image/jpeg'|'image/png'|'image/gif'|'image/x-ms-bmp' ]] && check_size 20000000
            ;;
        upload)
            vgyme_json=$(curl_form_upload 'file' 'https://vgy.me/upload') || return 1
            vgyme_link=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/[a-zA-Z0-9]+' | head -1)
            vgyme_direct=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/[a-zA-Z0-9]+\.[a-zA-Z]+')
            vgyme_delete=$(echo "$vgyme_json" | grep -oE 'https://vgy\.me/delete/[a-zA-Z0-9]+')
            echo ''
            echo "Link: $vgyme_link"
            echo "Direct Link: $vgyme_direct"
            echo "Delete: $vgyme_delete"
            echo ''
            ;;
    esac
}

function anypaste-tinyimg {
    case $1 in
        check_eligibility)
            [[ "$ap_file_ib" =~ "image/" ]] && check_size 10000000
            ;;
        upload)
            tinyimg_json=$(curl_form_upload 'qqfile' 'https://tinyimg.io/upload') || return 1
            tinyimg_filename=$(echo "$tinyimg_json" | grep -o '[a-zA-Z0-9.]*' | tail -1)
            echo ''
            echo "Direct Link: https://tinyimg.io/i/$tinyimg_filename"
            echo ''
            ;;
    esac
}

function anypaste-instaudio {
    case $1 in
        check_eligibility)
            [[ "$ap_file_ib" =~ 'audio/x-wav'|'audio/mpeg'|'audio/ogg' ]] && check_size 15000000
            ;;
        upload)
            inst_json=$(curl_form_upload 'audio_file' 'https://instaud.io/new.json') || return 1
            inst_redirect=$(echo "$inst_json" | grep -oE '/[a-zA-Z0-9]+')
            # this is POSIX compliant, I guess
            ap_ext="${ap_path##*.}"
            echo ''
            echo "Link: https://instaud.io$inst_redirect"
            # apparently this is POSIX compliant?
            echo "Direct Link: https://instaud.io/_$inst_redirect.$ap_ext"
            echo ''
            ;;
    esac
}

function anypaste-streamable {
    case $1 in
    check_eligibility)
        [[ "$ap_file_ib" =~ 'video/'|'image/gif' ]] && check_size 10000000000
        ;;
    get_required_config)
        echo 'streamable_email'
        echo 'streamable_password'
        ;;
    upload)
        streamable_json=$(curl -#fu "$streamable_email:$streamable_password" -F "file=@$ap_path" https://api.streamable.com/upload) || return 1
        # oof owie ouch
        # 4 processes, two `revs`, and one simple string manipulation. Watch the latest episode
        # of "Bash Hackers" on Cartoon Network at 5:30 central.
        streamable_shortcode=$(echo "$streamable_json" | grep -o '\w*' | tail -n 1)
        echo ''
        echo "Link: https://streamable.com/$streamable_shortcode"
        echo ''
        ;;
    esac
}

function anypaste-gfycat {
    case $1 in
        check_eligibility)
            [[ "$ap_file_ib" =~ "video/"|"image/gif" ]]
            ;;
        upload)
            # this is one of the more complex ones
            # get the key/name of the gfy
            gfy_init_json=$(curl -sfXPOST https://api.gfycat.com/v1/gfycats) || {
                echo 'Getting gfycat key did not return HTTP 200!'
                return 1;
            }
            gfy_name=$(echo "$gfy_init_json" | grep -o '[a-zA-Z]*' | awk 'NR==4')
            # the file being uploaded must have the same name as the key
            # since i don't know how to set it using curl options, I'm
            # just using a symbolic link with the correct name.
            ln -s "$ap_path" "/tmp/$gfy_name"
            curl_file_upload 'PUT' "/tmp/$gfy_name" 'https://filedrop.gfycat.com' > /dev/null || return 1
            rm -f "/tmp/$gfy_name"
            # We have to wait for encoding (unlike with streamable) because
            # during encoding, if it has the same hash as another gfy, it
            # returns the (different) link to the original gfy, and the new
            # one won't work. It's possible to override this to upload with
            # the new URL regardless, but i don't need to use up extra space
            # on the gfycat servers.
            echo 'Waiting for remote encoding to complete...'
            while true
            do
                sleep 4
                gfy_status=$(curl -fs https://api.gfycat.com/v1/gfycats/fetch/status/$gfy_name) || {
                    echo 'Status check request did not return HTTP 200!'
                    echo "Your file might end up here anyway: https://gfycat.com/$gfy_name"
                    return 1;
                }
                [[ "$gfy_status" =~ 'complete' ]] && break
            done
            gfy_final_name=$(echo "$gfy_status" | grep -o 'gfy[Nn]ame":"[a-zA-Z]*' | head -1 | cut -c 11-)
            echo ''
            echo "Link: https://gfycat.com/$gfy_final_name"
            echo "Direct(ish) Link: https://thumbs.gfycat.com/$gfy_final_name-size_restricted.gif"
            echo ''
    esac
}

function anypaste-docdroid {
    case $1 in
    get_required_config)
        echo 'docdroid_access_token'
        ;;
    check_eligibility)
        [[ "$ap_file_ib" =~ 'application/pdf'|'application/msword'|'application/vnd.openxmlformats-officedocument'|'application/vnd.ms'|'application/vnd.oasis.opendocument'|'text/plain'|'text/rtf' ]]
        ;;
    upload)
        docdroid_json=$(curl -H "Authorization: Bearer $docdroid_access_token" -#fF "file=@$ap_path" https://docdroid.net/api/document)
        docdroid_id=$(echo "$docdroid_json" | grep -o '[a-zA-Z0-9]*' | awk 'NR==3')
        echo ''
        echo "Link: http://docdro.id/$docdroid_id"
        echo ''
        ;;
    esac
}

#################
## END PLUGINS ##
## BEGIN CORE ###
#################

# FUNCTIONS

# exit safely, remove temporary files if any
ap_tmp_files=()
function ap_exit {
    [[ -n "$ap_tmp_files" ]] && rm "${ap_tmp_files[@]}"
    [[ -n $1 ]] && exit $1 || exit
}

# Y is always default. Word your questions better. Be positive!
# args: message
function ap_i_yn {
    echo -n "$1 [Y/n] "
    read ap_attempt
    [[ "$ap_attempt" != 'n' && "$ap_attempt" != 'N' ]]
}

# will search $ap_compatible_plugins for search term. If successful, matched plugin
# will go in $ap_plugin. If failed, it will print an error and return 1
# Also, if search term is the exact name of an executable, it will be ok
# args: search term
function search_compatible_plugins {
    # If empty, use first plugin
    [[ -z "$1" ]] && ap_plugin="$ap_compatible_plugins" && return
    # If the plugin is the exact name of a command, we can use it even if not in config
    command -v "$1" > /dev/null && ap_plugin="$1" && return
    ap_matched_plugins=()
    for ap_plugin in "${ap_compatible_plugins[@]}"
    do
        [[ "$ap_plugin" =~ "$1" ]] && ap_matched_plugins+=("$ap_plugin")
    done
    case ${#ap_matched_plugins[@]} in
    0)
        echo "No plugins matched '$1'."
        echo "Available plugins are: ${ap_compatible_plugins[@]}"
        return 1
        ;;
    1)
        ap_plugin="$ap_matched_plugins"
        ;;
    *)
        echo "Multiple plugins matched '$1': ${ap_matched_plugins[@]}"
        echo 'Refine your search and try again.'
        return 1
        ;;
    esac
}

function ap_i_select_plugin {
    # fail if no plugins
    [[ ${#ap_compatible_plugins[@]} -eq 0 ]] && return 1
    if [[ ${#ap_compatible_plugins[@]} -eq 1 ]] 
    then
        echo "Only one compatible plugin was found: $ap_compatible_plugins"
        ap_plugin="$ap_compatible_plugins"
    fi
    echo "The following plugins were found: ${ap_compatible_plugins[@]}"
    # keep asking for search terms until we find something
    while true
    do
        echo ''
        echo 'Enter the (partial) name of a plugin, or nothing for automatic selection'
        read ap_search_term
        search_compatible_plugins "$ap_search_term" && break
    done
}

# HELP

ap_help='
Usage: anypaste [-ifh] [-p plugin] [-c config_file_path] [file1 [file2 ...]]

Upload `file`s or stdin to an automatically selected hosting sites.
You can specify `-` as a file to read from stdin. If no files are
listed, it will automatically attempt to use stdin.

OPTIONS:

 -i          Enable interactive mode. Will prompt for important options.
             Combining this with options intended for non-interactive
             use (e.g, -p) has undefined behavior. If you are reading
             your file from stdin, -i might not work properly.
 -p          Force using the given plugin, even if it is not listed in
             the configuration file. Will not fall back to other plugins
             or check plugin compatibility.
 -f          Do not check plugin compatibility. Without -p, it uses the
             first listed plugin in the config file.
 -c          Use the specified configuration file instead of the default
             one located at $XDG_CONFIG_HOME/anypaste.conf. You can use
             /dev/null as a config file to have nothing at all, but you
             will need to set config variables in the shell manually
 -h, --help  Display this help text.

Plugins may support additional options not listed here.
'

if [[ "$@" =~ '--help' ]]
then
    echo "$ap_help"
    ap_exit
fi

# PARSE OPTIONS

ap_i='false'
ap_f='false'
ap_p=""
ap_cfg=""

while getopts 'fhip:c:' ap_opt
do
    case $ap_opt in
    h)
        echo "$ap_help"
        ap_exit
        ;;
    i)
        ap_i='true'
        ;;
    p)
        ap_p="$OPTARG"
        ;;
    f)
        ap_f='true'
        ;;
    c)
        ap_cfg="$OPTARG"
        ;;
    esac
done

shift $[OPTIND - 1]

# CREATE CONFIGURATION

# determine path to configuration file
# todo: allow command-line specified configuration file

if [[ -z "$ap_cfg" ]]
then
    [[ -n "$XDG_CONFIG_HOME" ]] && ap_cfg="$XDG_CONFIG_HOME/anypaste.conf" || ap_cfg="$HOME/.config/anypaste.conf"
fi

if [[ ! -e "$ap_cfg" ]]
then
    echo "Could not find configuration file, creating one at $ap_cfg."
    echo 'The default configuration is fine unless you want to enable extra plugins.'
    # todo: possibly use base64 instead
    cat > "$ap_cfg" << 'CFG'
ap_plugins=(
# Videos/Gifs
'anypaste-streamable' 'anypaste-gfycat'
# Images
'anypaste-vgyme' 'anypaste-tinyimg'
# Audio
'anypaste-instaudio'
# Text
'anypaste-hastebin' 'anypaste-ixio' 'anypaste-sprunge'
# Documents
'anypaste-docdroid'
# Any file
'anypaste-fileio'
)
CFG
fi

# LOAD AND CHECK CONFIGURATION

source "$ap_cfg"

[[ ${#ap_plugins[@]} -eq 0 ]] && echo 'No plugins listed in config!' && ap_exit 1

# GET FILE DATA

ap_paths=()
function ap_stdin_to_file {
    [[ -t 0 ]] && return 1
    ap_rand_filename=$(tr -dc a-zA-Z0-9 < /dev/urandom | head -c 20)
    ap_tmp_path="/tmp/anypaste-$ap_rand_filename"
    cat > "$ap_tmp_path"
    ap_paths+=("$ap_tmp_path")
    ap_tmp_files+=("$ap_tmp_path")
}
if [[ $# -gt 0 ]]
then
    # files were specified on the command line
    ap_found_stdin='false'
    for i in "$@"
    do
        if [[ "$i" == "-" ]]
        then
            $ap_found_stdin && echo "Don't specify stdin multiple times, you twerp!" && ap_exit 1
            ap_found_stdin='true'
            ap_stdin_to_file || { echo 'ERROR: stdin is a terminal!' && ap_exit; }
        else
            ap_paths+=("$i")
        fi        
    done
else
    # no files on command line, try stdin
    if ! ap_stdin_to_file
    then
        echo 'ERROR: no file specified and stdin is a terminal'
        echo "$ap_help"
        ap_exit
    fi
fi


# CHECK CONFIGURATION PARAMETERS FUNCTION

function check_eligibility {
    $ap_plugin check_eligibility || return 1
    missing_configs=()
    for cur_req_config in $($ap_plugin get_required_config)
    do
        if [[ -z "${!cur_req_config}" ]]
        then
            missing_configs+=("$cur_req_config")
        fi
    done
    if [[ -n "${missing_configs[@]}" ]]
    then
        echo "Missing required configuration parameters for $ap_plugin: ${missing_configs[@]}"
        echo 'You can set them in your configuration file.'
        return 1
    fi
}

# UPLOAD FUNCTION

# args: plugin executable, ap_path, ap_file_ib
function upload_plugin {
    echo "Attempting to upload with plugin $ap_plugin"
    if $ap_plugin upload
    then
        echo 'Upload complete.'
    else
        echo 'Plugin reported an error.'
        return 1
    fi
}

# LOOP THROUGH PLUGINS

# args: whether to check compatibility
function find_plugins {
    $1 && ap_compatible_plugins=("${ap_plugins[@]}") && return
    ap_compatible_plugins=()
    for ap_plugin in "${ap_plugins[@]}"
    do
        check_eligibility && ap_compatible_plugins+=("$ap_plugin")
    done
}

function upload_loop {
    if [[ ! -r "$ap_path" ]]
    then
        echo "ERROR: could not read file at $ap_path"
        echo "Make sure it exists and you have permissions to read it."
        return 1
    fi
    [[ -d "$ap_path" ]] && echo "Uh oh! You can't upload a directory!" && return 1
    ap_file_ib=$(file -ib "$ap_path")

    echo "Current file: $ap_user_path"
    if $ap_i
    then
        # INTERACTIVE
        ap_i_yn 'Determine compatible plugins automatically?' && ap_skip_compat='false' || ap_skip_compat='true'
        find_plugins $ap_skip_compat
        # keep looping and selecting plugins, removing the previously attempted plugin each time, until we succeed
        # or there are none left
        while true
        do
            ap_i_select_plugin || return 1
            ap_i_yn "Attempt to upload with plugin $ap_plugin?" || continue
            upload_plugin && return ||
                ap_compatible_plugins=("${ap_compatible_plugins[@]/$ap_plugin}")
        done
    else
        # NON-INTERACTIVE
        if [[ -n "$ap_p" ]]
        then
            find_plugins "$ap_f"
            search_compatible_plugins "$ap_p" || return 1
            upload_plugin && return
        else
            find_plugins "$ap_f"
            for ap_plugin in "${ap_compatible_plugins[@]}"
            do
                upload_plugin && return
            done
            echo 'No compatible plugins found, or all compatible plugins failed.'
        fi
    fi
}

ap_exit_code=0
for ap_user_path in "${ap_paths[@]}"
do
    ap_path=$(readlink -f "$ap_user_path")
    upload_loop || ap_exit_code=1
done
echo 'All files processed. Have a nice day!'

ap_exit $ap_exit_codeap_selected_plugin